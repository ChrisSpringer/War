public class Card 
{
	protected CardSuit suit;
	protected CardValue value;
	public Card(CardSuit suit, CardValue number)
	{
		this.suit = suit;
		value = number;
	}
	public String toString() {
			return value + " of " + suit;
	}
	

	public boolean winner(Card c) {
			if(this.value.compareTo(c.value) > 0)
			{	
				return true;
			}
			else if(this.value.compareTo(c.value) < 0)
			{
				return false;
			}
			else
			{
				if(this.suit.compareTo(c.suit) > 0)
				{
					return true;
				}
				else
				{
					return false;
				}
			}
	}
}

public enum CardSuit 
{
	DIAMONDS, CLUBS, HEARTS, SPADES;
}

public enum CardValue 
{
	TWO, 
	THREE, 
	FOUR, 
	FIVE, 
	SIX, 
	SEVEN, 
	EIGHT, 
	NINE,
	TEN, 
	JACK, 
	QUEEN,
	KING ,
	ACE; 
}

public class Deck 
{
	protected Card[] cards = new Card[52];
	
	public Deck() {
		int numOfCards = 0;
		for(int x = 0; x < 13; x++)
		{
			CardValue value = CardValue.values()[x];
			for(int y = 0; y < 4; y++)
			{
				cards[numOfCards] = new Card(CardSuit.values()[y], value);
				numOfCards++;
			}
		}
	}

	public Card draw() {
		int newArraySize = cards.length-1;
		Card drawnCard = cards[(int)(Math.random()* (newArraySize + 1))];
		int position = 0;
		Card[] remainingCards = new Card[newArraySize];
		for(Card c: cards)
		{
			if(position == remainingCards.length)
			{
				break;
			}
			if(!c.equals(drawnCard))
			{
				remainingCards[position] = c;
				position++;
			}
		}
		cards = remainingCards;
		return drawnCard;
	}
}

public class MainDriver 
{
	static final int HANDS = 52;
	
	public static void main(String[] args) {

		Deck player1 = new Deck();
		Deck player2 = new Deck();
		
		int player1Score = 0, player2Score = 0;
		
		// TODO: gameplay
		for(int x = 0; x < HANDS; x++)
		{
			Card player1Card = player1.draw();
			Card player2Card = player2.draw();
			System.out.println(player1Card.toString() + " " + player2Card.toString());
			if(player1Card.winner(player2Card))
			{
				player1Score++;
				System.out.println("Player 1 wins hand.");
			}
			else
			{
				player2Score++;
				System.out.println("Player 2 wins hand.");
			}
		}
		System.out.printf("Final score: Player 1--%d; Player 2--%d", player1Score, player2Score);
		if(player1Score > player2Score)
		{
			System.out.println("\nPlayer1 WINS!!!");
		}
		else if(player2Score > player1Score)
		{
			System.out.println("\nPlayer2 WINS!!!");
		}
		else
		{
			System.out.println("\nTie. Play again.");
		}
	}
}

public class MainDriverPeace
{
	static final int HANDS = 52;
	
	public static void main(String[] args) {

		PeaceDeck player1 = new PeaceDeck();
		PeaceDeck player2 = new PeaceDeck();
		
		int player1Score = 0, player2Score = 0;
		
		// TODO: gameplay
		for(int x = 0; x < HANDS; x++)
		{
			Card player1Card = player1.draw();
			Card player2Card = player2.draw();
			System.out.println(player1Card.toString() + " " + player2Card.toString());
			if(player1Card.winner(player2Card))
			{
				player1Score++;
				System.out.println("Player 1 wins hand.");
			}
			else
			{
				player2Score++;
				System.out.println("Player 2 wins hand.");
			}
		}
		System.out.printf("Final score: Player 1--%d; Player 2--%d", player1Score, player2Score);
		if(player1Score > player2Score)
		{
			System.out.println("\nPlayer1 WINS!!!");
		}
		else if(player2Score > player1Score)
		{
			System.out.println("\nPlayer2 WINS!!!");
		}
		else
		{
			System.out.println("\nTie. Play again.");
		}
	}
}

public class PeaceCard extends Card
{
	public PeaceCard(CardSuit suit, CardValue value)
	{
		super(suit,value);
	}
	public boolean winner(Card card)
	{
		if(this.value.compareTo(card.value) < 0)
		{	
			return true;
		}
		else if(this.value.compareTo(card.value) > 0)
		{
			return false;
		}
		else
		{
			if(this.suit.compareTo(card.suit) < 0)
			{
				return true;
			}
			else
			{
				return false;
			}
		}
	}
}

public class PeaceDeck extends Deck
{
	public PeaceDeck() {
		int numOfCards = 0;
		for(int x = 0; x < 13; x++)
		{
			CardValue value = CardValue.values()[x];
			for(int y = 0; y < 4; y++)
			{
				cards[numOfCards] = new PeaceCard(CardSuit.values()[y], value);
				numOfCards++;
			}
		}
	}
}
